#!/bin/bash

ready() {
    	PORTS=`ss -tunpl | awk '{ print $5 }' |grep -Eohw ':(80|443|8080|8081|8082|8083|8084|8085|8086|8090|1389|1689|11211)$'`
    	STAT=(`df -aP |grep \/opt\/gluu-server\/ | awk '{ print $6 }' | grep -Eohw 'proc|lo|pts|modules|dev'`)
    	if [ -f $PIDFILE ] && [ ${#STAT[@]} = "6" ]; then
            PID=`cat $PIDFILE`
            return 1
        elif [ -f $PIDFILE ] || [ "$STAT" != "" ]; then
            return 1
        elif [ "$PORTS" != "" ]; then
            return 1
	fi 
        return 0
}
 
wait_stop() {
    end=$((SECONDS+30))
 
    while [ $SECONDS -lt $end ]; do
        ready
        STAT=$?
        if [ $STAT = 0 ]; then
            return 0;
        fi
        sleep 10
    done
 
    return 1
}

update_limits_conf() {
        LIMITS_FILE="/etc/security/limits.conf"
        LIMITS_ORG="/etc/security/limits.conf.org"
        'cp' $LIMITS_FILE $LIMITS_ORG
        # Update no of files
        grep -v "$1" $LIMITS_FILE > ${LIMITS_FILE}.bak
        mv ${LIMITS_FILE}.bak $LIMITS_FILE
        echo "$1" >> $LIMITS_FILE
}

tune_os() {
        update_limits_conf '* soft nofile 65535'
        update_limits_conf '* hard nofile 262144'

        if [ -f '/proc/sys/fs/file-max' ]; then
                CURRENT_FILES_LIMIT=`cat /proc/sys/fs/file-max`
                if [ $CURRENT_FILES_LIMIT -le 262144 ]; then
                        echo "The current max files limit is: $CURRENT_FILES_LIMIT";
                        echo "Setting to 262144";
                else
                        echo "The current max files limit $CURRENT_FILES_LIMIT seems sufficient for current requirements.";
                fi
        else
                echo "The file /proc/sys/fs/file-max does not exist."
                echo "Please check the corresponding file for your OS..."
        fi
}

case "$1" in
        start)
            systemctl start systemd-nspawn@gluu-server.service
            ;;
         
        stop)
            systemctl stop systemd-nspawn@gluu-server.service
            ;;
         
        status)
            systemctl status systemd-nspawn@gluu-server.service
            ;;
        restart)
            systemctl stop systemd-nspawn@gluu-server.service
	    wait_stop
            systemctl start systemd-nspawn@gluu-server.service
            ;;
	ready)
	    ready
	    ;;
        login)
            PID=$(machinectl status gluu-server 2>/dev/null | grep Leader | awk -F ' ' '{ print $2 };' )
	    if [[ ${PID} =~ ^-?[0-9]+$ ]] ; then
                ssh  -o IdentityFile=/etc/gluu/keys/gluu-console -o Port=60022 -o LogLevel=QUIET \
                -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                -o PubkeyAuthentication=yes root@localhost
            else
                echo "Gluu server is not started."
            fi
	    ;;
        enable)
	    systemctl enable machines.target
	    systemctl enable systemd-nspawn@gluu-server.service
	    ;;
	disable) 
	    systemctl disable systemd-nspawn@gluu-server.service
            systemctl disable machines.target
            ;; 
	tune_os) 
            tune_os
            ;; 
	*)
            echo $"Usage: $0 {enable|start|restart|ready|login|stop|disable|tune_os|status}"
            exit 1
esac
