//java -cp .:WEB-INF/lib/* bsh.Interpreter script.bsh
import org.apache.logging.log4j.status.StatusLogger;
import org.apache.logging.log4j.Level;
import org.apache.commons.lang.StringUtils;

import org.bouncycastle.asn1.sec.SECNamedCurves;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.math.ec.ECPoint;

import org.gluu.fido.model.entry.DeviceRegistration;
import org.gluu.fido.model.entry.DeviceRegistrationStatus;
import org.gluu.fido2.model.entry.Fido2RegistrationData;
import org.gluu.fido2.model.entry.Fido2RegistrationEntry;
import org.gluu.fido2.model.entry.Fido2RegistrationStatus;
import org.gluu.fido2.ctap.AttestationFormat;
import org.gluu.fido2.ctap.CoseEC2Algorithm;

import org.gluu.model.custom.script.model.CustomScript;
import org.gluu.model.SimpleCustomProperty;
import org.gluu.persist.model.base.SimpleBranch;
import org.gluu.persist.model.base.SimpleUser;
import org.gluu.search.filter.Filter;
import org.gluu.service.net.NetworkService;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.dataformat.cbor.CBORFactory;

static {
	print("Initializing...");
	StatusLogger.getLogger().setLevel(Level.OFF);
}

source("persistence.bsh");
mapper = new ObjectMapper();
nfailed = 0;
persistenceEntryManager = getEntryManager();

getBaseDnForFido2RegistrationEntries(String userInum) {
	return format("ou=fido2_register,inum=%s,ou=people,o=gluu", userInum);
}

getBaseDnForU2fUserDevices(String userInum) {
	return format("ou=fido,inum=%s,ou=people,o=gluu", userInum);
}

JsonNode convertECKeyToUncompressedPoint(byte[] encodedPublicKey) {
	X9ECParameters curve = SECNamedCurves.getByName("secp256r1");
	ECPoint point = curve.getCurve().decodePoint(encodedPublicKey);
	int keySizeBytes = (curve.getN().bitLength() + Byte.SIZE - 1) / Byte.SIZE;

	ObjectNode uncompressedECPointNode = mapper.createObjectNode();
	uncompressedECPointNode.put("1", 2);
	uncompressedECPointNode.put("3", -7);
	uncompressedECPointNode.put("-1", 1);
	uncompressedECPointNode.put("-2", toUncompressedCoord(point.getAffineXCoord().toBigInteger().toByteArray(), keySizeBytes));
	uncompressedECPointNode.put("-3", toUncompressedCoord(point.getAffineYCoord().toBigInteger().toByteArray(), keySizeBytes));

	return uncompressedECPointNode;
}

toUncompressedCoord(byte[] coord, int keySizeBytes) {
	byte[] uncompressedPoint = new byte[keySizeBytes];

	if (coord.length <= keySizeBytes) {
		return coord;
	} else if ((coord.length == keySizeBytes + 1) && (coord[0] == 0)) {
		System.arraycopy(coord, 1, uncompressedPoint, 0, keySizeBytes);
		return uncompressedPoint;
	} else {
		throw new IllegalStateException("coord value is too large");
	}
}

convertToFido2RegistrationData(String documentDomain, String username, DeviceRegistration fidoRegistration) {

	Fido2RegistrationData registrationData = new Fido2RegistrationData();
	
	registrationData.setCreatedDate(fidoRegistration.getCreationDate());
	registrationData.setUpdatedDate(new Date());
	registrationData.setCreatedBy(username);
	registrationData.setUpdatedBy(username);

	registrationData.setUsername(username);
	registrationData.setDomain(documentDomain);

	base64UrlDecoder = Base64.getUrlDecoder();
	JsonNode uncompressedECPoint = convertECKeyToUncompressedPoint(
			base64UrlDecoder.decode(fidoRegistration.getDeviceRegistrationConfiguration().getPublicKey()));
	
	base64UrlEncoder = Base64.getUrlEncoder().withoutPadding();	
	cborObjectMapper = new ObjectMapper(new CBORFactory());
	registrationData.setUncompressedECPoint(base64UrlEncoder.encodeToString(cborObjectMapper.writeValueAsBytes(uncompressedECPoint)));

	registrationData.setPublicKeyId(fidoRegistration.getKeyHandle());

	registrationData.setCounter((int) fidoRegistration.getCounter());
	if (registrationData.getCounter() == -1) {
		registrationData.setCounter(0);
	}
	
	registrationData.setType("public-key");
	registrationData.setAttestationType(/*"fido-u2f"*/AttestationFormat.fido_u2f.getFmt());
	registrationData.setSignatureAlgorithm(/*-260*/CoseEC2Algorithm.ES256.getNumericValue());

	registrationData.setStatus(Fido2RegistrationStatus.registered);
	
	registrationData.setApplicationId(fidoRegistration.getApplication());

	return registrationData;
}

buildFido2RegistrationEntry(Fido2RegistrationData registrationData, String userInum) {
	
	String userName = registrationData.getUsername();
	Date date = registrationData.getCreatedDate();
	
	final String id = UUID.randomUUID().toString();
	final String challenge = registrationData.getChallenge();

	String dn = format("oxId=%s,%s", id, getBaseDnForFido2RegistrationEntries(userInum));
	Fido2RegistrationEntry registrationEntry = new Fido2RegistrationEntry(dn, id, date, userInum, registrationData, challenge);
	registrationEntry.setRegistrationStatus(registrationData.getStatus());
	if (StringUtils.isNotEmpty(challenge)) {
		registrationEntry.setChallangeHash(String.valueOf(getChallengeHashCode(challenge)));
	}

	registrationData.setCreatedBy(userName);

	return registrationEntry;
}

migrateToFido2(List/*<DeviceRegistration>*/ fidoRegistrations, String documentDomain, String username, String userInum) {
	
	for (DeviceRegistration fidoRegistration: fidoRegistrations) {
		prnt("Migrating device " + fidoRegistration.getId());
		
		Fido2RegistrationData fido2RegistrationData;
		try {
			fido2RegistrationData = convertToFido2RegistrationData(documentDomain, username, fidoRegistration);
	
			// Save converted Fido2 entry
			Fido2RegistrationEntry fido2RegistrationEntry = buildFido2RegistrationEntry(fido2RegistrationData, userInum);
			fido2RegistrationEntry.setDisplayName(fidoRegistration.getDisplayName());
			fido2RegistrationEntry.setPublicKeyId(fido2RegistrationData.getPublicKeyId());
			persistenceEntryManager.persist(fido2RegistrationEntry);
			
			// Mark Fido registration entry as migrated
			fidoRegistration.setStatus(DeviceRegistrationStatus.MIGRATED);
			fidoRegistration.setDeletable(false);
			
			persistenceEntryManager.merge(fidoRegistration);
			prnt("Done");

		} catch (Exception e) {
			prnt("Failed " + e.getMessage());
			nfailed++;
			failed(fidoRegistration.getDn());
		}
	}
	
}

List/*<DeviceRegistration>*/ findAllRegistered(String userInum, String appId) {

	String baseDn = getBaseDnForU2fUserDevices(userInum);

	if (persistenceEntryManager.hasBranchesSupport(baseDn)) {
		if (!containsBranch(baseDn)) {
			return Collections.emptyList();
		}
	}

	Filter resultFilter = Filter.createEqualityFilter("oxStatus", DeviceRegistrationStatus.ACTIVE.getValue());

	List fidoRegistrations = persistenceEntryManager.findEntries(baseDn, DeviceRegistration.class, resultFilter);
	fidoRegistrations2 = new ArrayList();
	
	for (DeviceRegistration dr : fidoRegistrations) {
		if (dr.getDeviceData() == null && appId.equals(dr.getApplication())) {
			fidoRegistrations2.add(dr);
		}
	}

	return fidoRegistrations2;
}

getU2fAppId() {
	appId = null;
	prop = "u2f_application_id";
	
	filter = Filter.createEqualityFilter("displayName", "u2f");
	script = persistenceEntryManager.findEntries("ou=scripts,o=gluu", CustomScript.class, filter, new String[]{"oxConfigurationProperty"}, 1).get(0);
	properties = script.getConfigurationProperties();
	
	for (p: properties) {
		if (p.getValue1().equals(prop)) {
			appId = p.getValue2();
		}
	}
	if (appId == null) {
		prnt(format("Property '%s' could not be looked up in u2f script", prop));
		System.exit(1);
	}
	return appId;
}

boolean containsBranch(String baseDn) {
	return persistenceEntryManager.contains(baseDn, SimpleBranch.class);
}

void addBranch(String baseDn) {
	SimpleBranch branch = new SimpleBranch();
	branch.setOrganizationalUnitName("fido2_register");
	branch.setDn(baseDn);

	persistenceEntryManager.persist(branch);
}

prepareBranch(String userInum) {
	String baseDn = getBaseDnForFido2RegistrationEntries(userInum);
	if (!persistenceEntryManager.hasBranchesSupport(baseDn)) {
		return;
	}

	// Create Fido2 base branch for registration entries if needed
	if (!containsBranch(baseDn)) {
		addBranch(baseDn);
	}
	
}

people() {
	filter = Filter.createPresenceFilter("inum");	
	return persistenceEntryManager.findEntries("ou=people,o=gluu", SimpleUser.class, filter, new String[]{"inum", "uid"});
}


applicationId = getU2fAppId();
documentDomain = new NetworkService().getHost(applicationId);
print("Migration in progress...");

for (person : people()) {
	userInum = person.getAttribute("inum");
	userName = person.getUserId();
	List existingFidoRegistrations = findAllRegistered(userInum, applicationId);
	
	size = existingFidoRegistrations.size();
	if (size > 0) {
		prnt(format("Found %s devices for %s", size, userName));
		prepareBranch(userInum);
		migrateToFido2(existingFidoRegistrations, documentDomain, userName, userInum);
	}
}

print("Finished");
if (nfailed > 0) {
	msg = format("%s entries failed for migration. Check file rejected.txt", nfailed);
	print(msg);
	prnt(msg);
}
